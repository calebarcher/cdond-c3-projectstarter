version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
             aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
             aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  restore-frontend-cache:
    steps:
      - restore_cache:
          keys: [frontend-build]

  restore-backend-cache:
    steps:
      - restore_cache:
          keys: [backend-build]

  save-frontend-cache:
    steps:
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  save-backend-cache:
    steps:
      - save_cache:
          paths: [backend/node_modules]
          key: frontend-build

  send-notification:
    steps:
      - slack/notify:
          channel: D03PUBCHLAX
          event: fail
          template: basic_fail_1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install       

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible  

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save-frontend-cache

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save-backend-cache
  
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: Testing the frontend.
          command: |
            cd frontend
            npm install
            npm run test
      
              
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: Testing the frontend.
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: Audit frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - send-notification

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: Audit backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - send-notification

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-project-backend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-project-frontend \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # - send-notification

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:9b:80:68:47:bd:33:40:29:8f:f1:b6:f4:9b:1f:ca"]
      - install_awscli
      - install_nodejs
      - install_ansible
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install Ansible
      #     command: |
      #       apk add --update ansible
      - run:
          name: Run Playbook and Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment    

  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - restore-backend-cache
      - install_awscli
      - install_nodejs
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install Dependencies
      #     command: |
      #       apk add --update nodejs npm
      #       apk add --update python py-pip 
      #       pip install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations
      - destroy-environment 


  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - destroy-environment
      # - send-notification      

  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:9b:80:68:47:bd:33:40:29:8f:f1:b6:f4:9b:1f:ca"]
      - install_awscli
      - install_nodejs
      - install_ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            echo NODE_ENV=production >> .env 
            echo VERSION=1 >> .env 
            echo TYPEORM_ENTITIES=${TYPEORM_ENTITIES} >> .env 
            echo TYPEORM_HOST=${TYPEORM_HOST} >> .env 
            echo TYPEORM_CONNECTION=${TYPEORM_CONNECTION} >> .env  
            echo TYPEORM_PORT:=${TYPEORM_PORT} >> .env 
            echo TYPEORM_USERNAME:=${TYPEORM_USERNAME} >> .env 
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .env 
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .env 
            echo TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS} >> .env 
            echo TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} >> .env 
            cat .env
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment 

  smoke-test:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # - revert-migrations
      # - destroy-environment 

    
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-project-frontend
      # - revert-migrations
      # - destroy-environment   

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      # - revert-migrations
      # - destroy-environment 
                  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
          context: slack_secrets
      - scan-backend:
          requires: [build-backend]
          context: slack_secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          context: slack_secrets
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      - deploy-frontend:
          # requires: [run-migrations]
          requires: [configure-infrastructure]
      - deploy-backend:
          # requires: [run-migrations]
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [smoke-test, cloudfront-update]