version: 2.1
orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  restore-frontend-cache:
    steps:
      - restore_cache:
          keys: [frontend-build]

  restore-backend-cache:
    steps:
      - restore_cache:
          keys: [backend-build]

  save-frontend-cache:
    steps:
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  save-backend-cache:
    steps:
      - save_cache:
          paths: [backend/node_modules]
          key: frontend-build

  send-notification:
    steps:
      - slack/notify:
          channel: D03PUBCHLAX
          event: fail
          template: basic_fail_1
  


jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save-frontend-cache

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save-backend-cache
  
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: Testing the frontend.
          command: |
            cd frontend
            npm install
            npm run test
      
              
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: Testing the frontend.
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-frontend-cache
      - run:
          name: Audit frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - send-notification

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore-backend-cache
      - run:
          name: Audit backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - send-notification

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              #--tags project=udapeople-project-backend \
              # --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-project-frontend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             echo '[all]' > ~/inventory.txt
             aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:project,Values=udapeople-project-backend " \
              --output text > ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - send-notification

 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
          context: slack_secrets
      - scan-backend:
          requires: [build-backend]
          context: slack_secrets
      - deploy-infrastructure:
          context: slack_secrets